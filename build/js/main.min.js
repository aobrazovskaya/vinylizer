!function(t){var r={};function i(n){if(r[n])return r[n].exports;var e=r[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,i),e.l=!0,e.exports}i.m=t,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(e,n){if(1&n&&(e=i(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)i.d(t,r,function(n){return e[n]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="",i(i.s="./js/main.js")}({"./js/main.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_track_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/track-list */ \"./js/modules/track-list.js\");\n\n\n(function () {\n  var wrapper = document.querySelector('.page-wrapper');\n  var vinylizer = wrapper.querySelector('.vinylizer');\n  var vinylizerButton = vinylizer.querySelector('.vinylizer__button');\n  var vinylizerRecord = vinylizer.querySelector('.vinylizer__record');\n  var vinylizerTonarm = wrapper.querySelector('.vinylizer__tonarm');\n  var TONARM_START_ANGLE = 26;\n  var TONARM_END_ANGLE = 43;\n  var trackCurrentTime = vinylizer.querySelector('.vinylizer__current-time span');\n  window.vinylizerRecordSpin = vinylizer.querySelector('.vinylizer__spin');\n  window.audio = wrapper.querySelector('audio');\n  vinylizerButton.addEventListener('click', function () {\n    vinylizerRecordSpin.classList.toggle('playing');\n\n    if (vinylizerRecordSpin.classList.contains('playing')) {\n      vinylizerButton.style.transform = \"rotate(180deg)\";\n      audio.play();\n    } else {\n      vinylizerButton.style.transform = \"rotate(0deg)\";\n      audio.pause();\n    }\n  });\n  audio.addEventListener('play', function () {\n    vinylizerRecordSpin.classList.add('playing');\n  });\n  audio.addEventListener('ended', function () {\n    vinylizerRecordSpin.classList.toggle('playing');\n    vinylizerTonarm.style.transform = \"rotate(0deg)\";\n    trackCurrentTime.textContent = \"00:00:000\";\n  });\n  /**\n   * Меняет положение тонарма в зависимости от текущего времени трека\n   * @param {Number} currentTime текущее время трека\n   * @param {Number} duration длительность трека\n   */\n\n  function tonarmPosition(currentTime, duration) {\n    var currentPersent = currentTime / duration * 100;\n    var currentDeg = (currentPersent * (TONARM_END_ANGLE - TONARM_START_ANGLE) / 100 + TONARM_START_ANGLE).toFixed(1);\n    vinylizerTonarm.style.transform = \"rotate(\".concat(currentDeg, \"deg)\");\n  }\n  /**\n   * Меняет строку с временем трека при изменении текущего времени трека\n   */\n\n\n  function changeAudioTime() {\n    var currentTime = 0;\n    var milliseconds = 0;\n    var seconds = 0;\n    var minutes = 0;\n    audio.addEventListener('timeupdate', function () {\n      currentTime = audio.currentTime * 1000;\n      milliseconds = parseInt(currentTime % 1000);\n      seconds = Math.floor(currentTime / 1000 % 60);\n      minutes = Math.floor(currentTime / (1000 * 60) % 60);\n      milliseconds = milliseconds < 100 ? \"0\" + milliseconds : milliseconds < 10 ? \"00\" + milliseconds : milliseconds;\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      trackCurrentTime.textContent = \"\".concat(minutes, \":\").concat(seconds, \":\").concat(milliseconds);\n      tonarmPosition(audio.currentTime, audio.duration);\n    });\n  }\n  /**\n   * Возвращает растояние между двумя точками\n   * @param {Number} x1 положение первой точки по оси x\n   * @param {Number} y1 положение первой точки по оси y\n   * @param {Number} x2 положение второй точки по оси x\n   * @param {Number} y2 положение второй точки по оси y\n   * @returns {Number} расстояние между точками\n   */\n\n\n  function getDistance(x1, y1, x2, y2) {\n    return Math.floor(Math.hypot(x2 - x1, y2 - y1));\n  }\n\n  vinylizerRecord.addEventListener('click', function (e) {\n    var currentPointX = e.offsetX;\n    var currentPointY = e.offsetY;\n    var insideDistance = 85;\n    var outsideDistance = e.currentTarget.offsetWidth / 2;\n    var centrePoint = {\n      x: e.currentTarget.offsetWidth / 2,\n      y: e.currentTarget.offsetHeight / 2\n    };\n    var allDistance = getDistance(centrePoint.x, centrePoint.y, currentPointX, currentPointY);\n\n    if (allDistance > insideDistance && allDistance < outsideDistance) {\n      audio.currentTime = audio.duration * (1 - (allDistance - insideDistance) / (outsideDistance - insideDistance));\n      audio.play();\n    }\n  });\n  Object(_modules_track_list__WEBPACK_IMPORTED_MODULE_0__[\"addTrackList\"])();\n  changeAudioTime();\n})();\n\n//# sourceURL=webpack:///./js/main.js?")},"./js/modules/track-list.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addTrackList", function() { return addTrackList; });\nvar addTrackList = function addTrackList() {\n  var trackList = [{\n    artist: "Zaz",\n    name: "Je veux",\n    path: "Zaz_-_Je_veux.mp3",\n    type: \'mp3\'\n  }, {\n    artist: "Океан Ельзи",\n    name: "Відпусти",\n    path: "Океан_Ельзи_-_Відпусти.mp3",\n    type: \'mp3\'\n  }, {\n    artist: "Red Hot Chili Peppers",\n    name: "Can\'t stop",\n    path: "Red_Hot_Chili_Peppers_-_Can\'t_stop.mp3",\n    type: \'mp3\'\n  }, {\n    artist: "Ava Max",\n    name: "Kings & Queens",\n    path: "Ava_Max_-_Kings_&_Queens.mp3",\n    type: \'mp3\'\n  }, {\n    artist: "Chris De Burgh",\n    name: "Lady in red",\n    path: "Chris_De_Burgh_-_LADY_IN_RED.mp3",\n    type: \'mp3\'\n  }, {\n    artist: "Reamonn",\n    name: "Tonight",\n    path: "Reamonn_-_Tonight.mp3",\n    type: \'mp3\'\n  }, {\n    artist: "Tanita Tikaram",\n    name: "Twist In My Sobriety",\n    path: "Tanita_Tikaram_-_Twist_In_My_Sobriety.mp3",\n    type: \'mp3\'\n  }];\n  var playlist = document.querySelector(\'.playlist ul\');\n  var trackTemplate = document.getElementById(\'trackTemplate\');\n  /**\n   * Возвращает название трека в виде строки \'Исполнитель - название трека\'\n   * @param {Object} track\n   * @returns {String}\n   */\n\n  function setTrackName(track) {\n    return "".concat(track.artist, " - ").concat(track.name);\n  }\n\n  var track;\n  trackList.forEach(function (trackItem) {\n    track = trackTemplate.content.cloneNode(true);\n    track.querySelector(\'p\').textContent = setTrackName(trackItem);\n    track.querySelector(\'li\').addEventListener(\'click\', function () {\n      window.audio.setAttribute(\'src\', "../audio/".concat(trackItem.path));\n      window.audio.setAttribute(\'type\', "audio/".concat(trackItem.type));\n      window.vinylizerRecordSpin.querySelector(\'svg textPath\').textContent = setTrackName(trackItem);\n      window.audio.play();\n    });\n    playlist.appendChild(track);\n  });\n  window.audio.src = "../audio/".concat(trackList[0].path);\n  window.vinylizerRecordSpin.querySelector(\'svg textPath\').textContent = setTrackName(trackList[0]);\n  ;\n};\n\n\n\n//# sourceURL=webpack:///./js/modules/track-list.js?')}});